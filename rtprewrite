#!/bin/bash
#
# Copyright (C) 2018 smallmuou <smallmuou@163.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

set -e

spushd() {
     pushd "$1" 2>&1> /dev/null
}

spopd() {
     popd 2>&1> /dev/null
}

info() {
     local green="\033[1;32m"
     local normal="\033[0m"
     echo -e "[${green}INFO${normal}] $1"
}


warn() {
     local yellow="\033[1;33m"
     local normal="\033[0m"
     echo -e "[${yellow}WARNING${normal}] $1"
}

cmdcheck() {
    command -v $1>/dev/null 2>&1 || { error >&2 "Please install command $1 first."; exit 1; }   
}

error() {
     local red="\033[1;31m"
     local normal="\033[0m"
     echo -e "[${red}ERROR${normal}] $1"
}

curdir() {
    if [ ${0:0:1} = '/' ] || [ ${0:0:1} = '~' ]; then
        echo "$(dirname $0)"
    elif [ -L $0 ];then
        name=`readlink $0`
        echo $(dirname $name)
    else
        echo "`pwd`/$(dirname $0)"
    fi
}

myos() {
    echo `uname|tr "[:upper:]" "[:lower:]"`
}

#########################################
###           GROBLE DEFINE           ###
#########################################

VERSION=1.0.0
AUTHOR=smallmuou

#########################################
###             ARG PARSER            ###
#########################################

usage() {
cat << EOF
`basename $0` version $VERSION by $AUTHOR

USAGE: `basename $0` [OPTIONS] destination-ip pcap-file

DESCRIPTION:
    The tool uses to rewrite rtp package for replay. it will output new pcap file and sdp file. you can use tcpreplay and vlc to replay the video or audio.
    
    Note that can not support video and audio at the same time.

OPTIONS:
    -h      Show this help message and exit
    -v      Assign video format message. The format is:  [payload-type:]codec/sample, like 96:h264/90000
    -a      Assign audio format message. The format is:  [payload-type:]codec/sample, like 8:PCMA/8000

EXAMPLES:
    rtprewrite -a PCMU/8000 192.168.12.102 in.pcap
    rtprewrite -v H264/90000 192.168.12.102 in.pcap
    rtprewrite -v 96:H264/90000 192.168.12.102 in.pcap

EOF
exit 1
}

AUDIO_PAYLOAD_TYPE=
AUDIO_FORMAT=
VIDEO_PAYLOAD_TYPE=
VIDEO_FORMAT=

while getopts 'ha:v:' arg; do
    case $arg in
        h)
            usage
            ;;
        a)
             AUDIO_PAYLOAD_TYPE=`echo $OPTARG|awk -F: '/:/{print $1}'`
             AUDIO_FORMAT=`echo $OPTARG|awk -F: '{print $NF}'`
            ;;
        v)
             VIDEO_PAYLOAD_TYPE=`echo $OPTARG|awk -F: '/:/{print $1}'`
             VIDEO_FORMAT=`echo $OPTARG|awk -F: '{print $NF}'`
            ;;
        ?)
            usage
            ;;
    esac
done

shift $(($OPTIND - 1))

#########################################
###            MAIN ENTRY             ###
#########################################

[ `myos` != 'linux' ] && { error 'Only support linux os currently';exit -1; }
[ $# -lt 2 ] && usage

DST_IP=$1
SRC_PCAP=$2
DST_PCAP=output.pcap

[ ! -f ${SRC_PCAP} ] && { error "The pcap file $SRC_PCAP does not exist."; exit -1; }

cmdcheck tcprewrite
cmdcheck tshark

[ -z "${AUDIO_FORMAT}" ] && [ -z "${VIDEO_FORMAT}" ] && { error 'You must assign audio or video codec.'; exit -1; }
[ -n "${AUDIO_FORMAT}" ] && [ -n "${VIDEO_FORMAT}" ] && { error 'Can not support audio and video at the same time'; exit -1; }

# read source ip/dev/mac
SRC_IP=$(ip route get "${DST_IP}" | sed -n -r "s/.* src (\S*).*/\1/p")
SRC_DEV=$(ip route get "${DST_IP}" | sed -n -r "s/.* dev (\S*).*/\1/p")
SRC_MAC=$(ip link show "${SRC_DEV}" | sed -n -r "s/.*\/ether (\S*).*/\1/p")
[ -z ${SRC_MAC} ] && { error 'Failed to read source MAC address. Make sure that the destination IP does not belong to this machine'; exit -1; }

# read destination MAC
ping -q -c 1 -- "${DST_IP}" > /dev/null
ARP_PATH=$(which arp)

if [ -x "${ARP_PATH}" ];then
    ARP_CMD="${ARP_PATH}"
else
    ARP_CMD="sudo ${ARP_PATH}"
fi
DST_MAC=$(${ARP_CMD} -an -- "${DST_IP}" | sed -n -r "s/.* at (\S*).*/\1/p")

# read origin ip/mac
read ORIG_SRC_IP ORIG_SRC_MAC ORIG_DST_IP ORIG_DST_MAC ORIG_DST_PORT RTP_DATA <<<$(\
        tshark -T fields -e ip.src -e eth.src -e ip.dst -e eth.dst -e udp.dstport -e data.data -c 1 -r "${SRC_PCAP}" 2>/dev/null )

PAYLOAD_TYPE=`echo "${RTP_DATA}"|awk -F: '{print "0x"$2}'|xargs printf "%d\n"`

# tcprewrite
tcprewrite \
    --fixcsum \
    --srcipmap=${ORIG_SRC_IP}/32:${SRC_IP}/32 \
    --enet-smac=${SRC_MAC} \
    --dstipmap=${ORIG_DST_IP}/32:${DST_IP}/32 \
    --enet-dmac=${DST_MAC} \
    --infile="${SRC_PCAP}" \
    --outfile="${DST_PCAP}"

# sdp
[ -n "${AUDIO_FORMAT}" ] && [ -z "${AUDIO_PAYLOAD_TYPE}" ] && AUDIO_PAYLOAD_TYPE=$PAYLOAD_TYPE
[ -n "${VIDEO_FORMAT}" ] && [ -z "${VIDEO_PAYLOAD_TYPE}" ] && VIDEO_PAYLOAD_TYPE=$PAYLOAD_TYPE

sdp() {
cat << EOF
c=IN IP4 ${SRC_IP}
EOF

if [ -n "${AUDIO_FORMAT}" ];then
cat << EOF
m=audio ${ORIG_DST_PORT} RTP/AVP ${AUDIO_PAYLOAD_TYPE}
a=rtpmap:${AUDIO_PAYLOAD_TYPE} ${AUDIO_FORMAT}
EOF
fi

if [ -n "${VIDEO_FORMAT}" ];then
cat << EOF
m=video ${ORIG_DST_PORT} RTP/AVP ${VIDEO_PAYLOAD_TYPE}
a=rtpmap:${VIDEO_PAYLOAD_TYPE} ${VIDEO_FORMAT}
EOF
fi

cat << EOF

EOF
}

info "Save the follow content to sdp file:\n"
sdp

info "Successfully, please type: tcpreplay --intf1=${SRC_DEV} '${DST_PCAP}'\n And play the above sdp file with player (like vlc) on destination pc."

